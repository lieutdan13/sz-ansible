#!/usr/bin/env python3

from argparse import ArgumentParser, RawTextHelpFormatter
import os, shlex, shutil, subprocess, sys


class AnsiblePlaybook():

    def __init__(self):
        ''' initialize the object '''

        self.pip_preinstall_requirements = ['pip', 'setuptools']
        self.pip_requirements = ['ansible', 'Jinja2']
        self.system_deps_packages = [
            'git',
            'python2.7',
            'python3',
            'python3-apt',
            'python3-dev',
            'python3-virtualenv',
            'virtualenv',
        ]

        self.venv_dir = os.path.join(os.environ['HOME'], '.virtualenvs/sz-Ansible-playbook')
        self.python_version = 'python3'

        os.environ = AnsiblePlaybook.get_clean_env()

        self.ArgumentParser = ArgumentParser(description='Ansible-playbook - ' +
                                                         'wrapper for running Ansible playbooks',
                                             formatter_class=RawTextHelpFormatter)

        self.wrapper_args, self.playbook_args = self.parse_arguments()
        self.handle_arguments()

    def run(self):
        ''' run the playbook '''


        if self.wrapper_args.bootstrap:
            self._bootstrap()
        elif self.wrapper_args.clean:
            self._clean()
        elif self.wrapper_args.install:
            self._install()
            return
        else:
            self._install()
            sys.exit(subprocess.call(['ansible-playbook'] + self.playbook_args,
                                     env=os.environ,
                                     cwd=os.path.abspath(os.path.dirname(__file__))))

    def _bootstrap(self):
        self._system_deps()
        sys.exit(0)

    def _clean(self):
        ''' cleanup the installed roles '''
        roles_dir = 'roles-installed/'
        for the_file in os.listdir(roles_dir):
            file_path = os.path.join(roles_dir, the_file)
            try:
                if os.path.isdir(file_path):
                    shutil.rmtree(file_path)
                    print("Removing {}".format(file_path))
            except Exception as e:
                print(e)

    def _virtualenv_make(self, python_version, venv_dir):
        ''' make a virtualenv in the specified directory '''

        error = 0

        if venv_dir:
            os.makedirs(venv_dir, mode=0o755, exist_ok=True)
            error = os.system("virtualenv -p {} {}".format(python_version, venv_dir))
        else:
            error = 1

        if error:
            sys.exit("could not create venv_dir {}".format(venv_dir))

    def _virtualenv_activate(self, venv_dir, install=True):
        ''' activate a virtualenv, creating one if specified '''

        activate_path = os.path.join(venv_dir, "bin/activate_this.py")
        with open(activate_path) as f:
            code = compile(f.read(), activate_path, 'exec')
            exec(code, dict(__file__=activate_path))

        if install:
            subprocess.call(shlex.split('pip install --upgrade {}'.format(' '.join(self.pip_preinstall_requirements))))
            subprocess.call(shlex.split('pip install --upgrade {}'.format(' '.join(self.pip_requirements))))

    def _system_deps(self):
        ''' install system dependencies '''

        if os.system('sudo apt-get update && sudo apt-get install -y {}'.format(' '.join(self.system_deps_packages))):
            sys.exit("failed to install system dependencies")

    def _install(self):
        ''' install required roles '''
        self.virtualenv_workon()
        self._install_ansible_roles()


    def _install_ansible_roles(self):
        subprocess.call(['ansible-galaxy', 'install', '--roles-path', './roles-installed/', '-r', 'requirements.yml'], env=os.environ, cwd=os.path.abspath(os.path.dirname(__file__)))

    def parse_arguments(self):
        ''' parse command line arguments '''

        environment_inventory = self.ArgumentParser.add_mutually_exclusive_group(required=True)

        environment_inventory \
            .add_argument('-i', '--inventory-file',
                          dest='inventory_file',
                          help='static inventory file',
                          type=str)

        environment_inventory \
            .add_argument('--bootstrap',
                          dest='bootstrap',
                          action='store_true',
                          help='bootstrap your Ansible environment')

        environment_inventory \
            .add_argument('--clean',
                          dest='clean',
                          action='store_true',
                          help='remove role dependencies for your Ansible environment')

        environment_inventory \
            .add_argument('--install',
                          dest='install',
                          action='store_true',
                          help='install pip and role dependencies for your Ansible environment')

        arg_list = {"--debug": {
                        "action": 'store_true',
                        "help": 'Enable debug mode',
                    },
                    "--venv": {
                        "dest": 'venv',
                        "help": 'Virtual environment directory. (Default: {})'.format(self.venv_dir),
                        "default": self.venv_dir,
                    }, }
        for arg_name, arg_opts in arg_list.items():
            self.ArgumentParser.add_argument(arg_name, **arg_opts)

        return self.ArgumentParser.parse_known_args()

    def handle_arguments(self):
        ''' handle the command line arguments '''

        os.environ['_ANSIBLE_INVENTORY_DEBUG'] = str(self.wrapper_args.debug)

        if self.wrapper_args.inventory_file:
            self.playbook_args.append('--inventory-file')
            self.playbook_args.append(self.wrapper_args.inventory_file)

        if self.wrapper_args.venv:
            self.venv_dir = os.path.expanduser(self.wrapper_args.venv)

    def virtualenv_workon(self):
        ''' create and load a python virtualenv into current env '''

        if not os.path.exists(self.venv_dir):
            self._virtualenv_make(self.python_version, self.venv_dir)
        self._virtualenv_activate(self.venv_dir)

    @staticmethod
    def get_clean_env():
        ''' return a clean environment '''

        return {
            'USER': os.environ['USER'],
            'HOME': os.environ['HOME'],
            'PATH': os.environ['PATH'],
            'PS1': '$',
            'TERM': os.environ.get('TERM', ''),
            'SSH_AGENT_PID': os.environ.get('SSH_AGENT_PID', ''),
            'SSH_AUTH_SOCK': os.environ.get('SSH_AUTH_SOCK', ''),
        }

if __name__ == '__main__':
    ansible_playbook = AnsiblePlaybook()
    ansible_playbook.run()
