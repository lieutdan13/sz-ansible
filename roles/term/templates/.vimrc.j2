" {{ ansible_managed }}

set nocompatible                       " required
set ruler                              " show the cursor position
set title                              " show title on the window
set scrolloff=3                        " minimal no. of lines around cursor
set laststatus=2                       " always show the status line
set incsearch                          " start searching as you type

if has("syntax")
  syntax on                            " activates syntax highlighting among other things
endif
filetype off                           " required

set rtp+=~/.vim/bundle/Vundle.vim/     " set the runtime path to include Vundle and initialize
call vundle#begin()

Plugin 'gmarik/Vundle.vim'             " let Vundle manage Vundle, required
Plugin 'tmhedberg/SimpylFold'          " No-BS Python code folding for Vim
Plugin 'vim-scripts/indentpython.vim'  " An alternative indentation script for python
if v:version >= 740
  Plugin 'Valloric/YouCompleteMe'        " A code-completion engine for Vim
endif
Plugin 'vim-syntastic/syntastic'       " Syntax checking hacks for vim
Plugin 'nvie/vim-flake8'               " Flake8 plugin for Vim
Plugin 'kien/ctrlp.vim'                " Fuzzy file, buffer, mru, tag, etc finder.
Plugin 'tpope/vim-fugitive'            " a Git wrapper so awesome, it should be illegal
Plugin 'scrooloose/nerdtree'           " a file system explorer
Plugin 'airblade/vim-gitgutter'        " shows a git diff in the 'gutter'
Plugin 'heavenshell/vim-pydocstring'   " Generate Python docstring to your Python script file
Plugin 'ekalinin/Dockerfile.vim'       " For Dockerfile handling and syntax highlighting
Plugin 'sheerun/vim-polyglot'          " A collection of language packs for Vim.

" Add all Vundle plugins here

" include default global config
if filereadable("/etc/vim/vimrc")
  source /etc/vim/vimrc
endif

" All Vundle Plugins must be added before the following line
call vundle#end()                      " required

filetype plugin indent on              " activates filetype detection

" 1,000 lines for copy buffer
set viminfo='20,<1000,s1000

" remember last line in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
noremap <F1> <NOP>

" increase maxmempattern
set maxmempattern=2000

" line Numbers
set number

" highlight all search results
hi Search cterm=NONE ctermfg=black
set hlsearch

" highlight trailing whitespace in RED
highlight TrailSpace guibg=red ctermbg=darkred
match TrailSpace /\s\+$/

" highlight python
let python_highlight_all=1

" PEP8
au BufNewFile,BufRead *.py
  \ set autoindent |
  \ set expandtab |
  \ set fileformat=unix |
  \ set softtabstop=4 |
  \ set shiftwidth=4 |
  \ set tabstop=4 |
  \ set textwidth=160

au FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" 2-space tabbed files
au BufNewFile,BufRead *.js,*.html,*.css,*.yml,*.yaml
  \ set autoindent |
  \ set expandtab |
  \ set softtabstop=2 |
  \ set shiftwidth=2 |
  \ set tabstop=2

" enable code folding
set foldmethod=indent
set foldlevel=99

" enable code folding with the spacebar
nnoremap <space> za

if exists(':YcmCompleter')
  " auto complete options
  let g:ycm_autoclose_preview_window_after_completion=1
  let g:ycm_server_keep_logfiles = 1
  let g:ycm_server_log_level = 'debug'
  map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
endif

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

" map CTRL+m to run pydocstring
nmap <silent> <C-m> <Plug>(pydocstring)

" Customize PyDocstring templates
let g:pydocstring_templates_dir = '/home/dschaefer/.config/pydocstring'

" split windows to the right and below
set splitbelow
set splitright

" split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" set encoding to UTF-8
set encoding=utf-8

" activates syntax highlighting from the start of the file
autocmd BufEnter * :syntax sync fromstart

" activates NERDTree on start
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
nnoremap <Leader>f :NERDTreeToggle<Enter>

" hides the Flake8 signs in the gutter
let g:flake8_show_in_gutter=0

if has("py3")
  " python with virtualenv support
  py3 << EOF
import os
virtualenv = os.environ.get('VIRTUAL_ENV')
if virtualenv:
    activate_this = os.path.join(virtualenv, 'bin', 'activate_this.py')
    if os.path.exists(activate_this):
        exec(compile(open(activate_this).read(), activate_this, 'exec'), {'__file__': activate_this})
EOF
endif

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()
